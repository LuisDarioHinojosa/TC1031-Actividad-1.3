/*
 * Binnacle.cpp
 *
 *  Created on: 16 sep. 2020
 *      Author: luisd
 */

#include "../Headers/Binnacle.h"
#include "../Headers/OrderAl.h"
#include "../Headers/Searcher.h"
#include <iostream>
#include <sstream>
#include <fstream>
#include <stdio.h>
#include <iterator>
#include <algorithm>


Binnacle::Binnacle() {
	// TODO Auto-generated constructor stub

}

Binnacle::~Binnacle() {
	// TODO Auto-generated destructor stub
}






int Binnacle::encodePorts(std::string num){
	if (num == "-"){
		return -1;
	}
	else{
		return stoi(num);
	}
}



void Binnacle::showEntries(){
	for(std::vector<BinnacleLine>::iterator it = this->data.begin(); it != this->data.end(); it++){
		std::cout << (*it) << std::endl;
	}
}


void Binnacle::showTotalNumberOfEntries(){
	std::cout << "Total Entries: " << this->data.size() <<std::endl;
	std::cout << std:: endl;
}

void Binnacle::readCsvLines(std::string filename){
	std::ifstream file(filename);
	if(file.fail()) throw std::runtime_error("Could not open file");


	std::string date,time, oIP, oPort, oName,dIP,dPort,dName,line;
	int numOport, numDport;

	while(std::getline(file, line)){
		std::stringstream ss(line);
		getline(ss,date,',');
		getline(ss,time,',');
		getline(ss,oIP,',');
		getline(ss,oPort,',');
		getline(ss,oName,',');
		getline(ss,dIP,',');
		getline(ss,dPort,',');
		getline(ss,dName,',');
		numOport = encodePorts(oPort);
		numDport = encodePorts(dPort);
		BinnacleLine entry(date,time,oIP,numOport,oName,dIP,numDport,dName);
		data.push_back(entry);
	}


	file.close();
}



void Binnacle::searchComputer(std::string name){
	std::vector<BinnacleLine> originNames;
	std::vector<BinnacleLine> destinyNames;
	for(std::vector<BinnacleLine>::iterator it = this->data.begin(); it != this->data.end(); it++){
		if((*it).getOriginName() == name){
			originNames.push_back((*it));
		}
		else if((*it).getDestinyName() == name){
			destinyNames.push_back((*it));
		}
	}

	/*

	std::cout << "The following origin computers were found:" << std::endl;
	for(std::vector<BinnacleLine>::iterator it = originNames.begin(); it != originNames.end(); it++){
		std::cout << (*it) << std::endl;
	}
	std::cout << "The following destiny computers were found:" << std::endl;
	for(std::vector<BinnacleLine>::iterator it = destinyNames.begin(); it != destinyNames.end(); it++){
		std::cout << (*it) << std::endl;
	}
	*/
	std::cout << "Total computers named " << name << " found: " << originNames.size()+destinyNames.size() << std::endl;

}



std::string Binnacle::getSecondDate(){
	std::string first = this->data[0].getDate();
	for(std::vector<BinnacleLine>::iterator it = this->data.begin(); it != this->data.end(); it++){
		if((*it).getDate() != first){
			return (*it).getDate();
		}
	}
}





int Binnacle::entriesPerDate(std::string date){
	int num = 0;
	for(std::vector<BinnacleLine>::iterator it = this->data.begin(); it != this->data.end(); it++){
		if((*it).getDate() == date){
			num ++;
		}
		if(((*it).getDate() != date)&&(num >0)){
			break;
		}
	}
	return num;
}





std::string Binnacle::extractMailName(std::string mail){
	std::string name;
	std::stringstream ss(mail);
	std::getline(ss,name,'.');
	return name;
}


/*
 * After analyzing the dataset, i discovered there are not instances of concrete person numbers in the destiny computer names
 * This (destiny computers) tend to be known web sites. Therefore, i decided to do a sequential search variation just on the origin names
 *
 */
int Binnacle::searchByName(std::string name){
	std::string extractedName, mail;

	int count = 0;
	for(std::vector<BinnacleLine>::iterator it = this->data.begin(); it != this->data.end(); it++){
		mail = (*it).getOriginName();
		extractedName = extractMailName(mail);
		if(extractedName == name){
			count ++;
		}
	}

	return count;
}


void Binnacle::sortedSearchByName(std::string name){
	sortData('o',true,5);
	int numComputers = searchByName(name);
	std::cout << "Name: " << name << std::endl;
	std::cout << "Number of occurrences: " << numComputers << std::endl;
}



void Binnacle::SetOrderCriteria(char oc){
	for(std::vector<BinnacleLine>::iterator it = this->data.begin(); it != this->data.end(); it++){
		(*it).setOrderCriteria(oc);
	}
}



void Binnacle::setData(std::vector<BinnacleLine> sorted){
	this->data = sorted;
}




void Binnacle::sortData(char c = 'o',bool asc = true, int al = 5){
	if((c == 't')||(c == 'e')||(c == 'y')||(c == 'a') || (c == 'p')){
		// Sets the same sort criteria in all the books
		SetOrderCriteria(c);

		if (asc == true){

			switch(al){
			case 1:{
				std::vector<BinnacleLine> st = OrderAl<BinnacleLine>::mergesort(data,0,data.size()-1,OrderAl<BinnacleLine>::asc);
				setData(st);

				break;
			}
			case 2:
			{
				std::vector<BinnacleLine> st = OrderAl<BinnacleLine>::bubble(data,OrderAl<BinnacleLine>::asc);
				setData(st);

				break;
			}
			case 3:
			{
				std::vector<BinnacleLine> st = OrderAl<BinnacleLine>::insersion(data,OrderAl<BinnacleLine>::asc);
				setData(st);
				break;
			}
			case 4:
			{
				std::vector<BinnacleLine> st = OrderAl<BinnacleLine>::selection(data,OrderAl<BinnacleLine>::asc);
				setData(st);
				break;
			}
			case 5:
			{
				std::vector<BinnacleLine> st = OrderAl<BinnacleLine>::quickSort(data,0,data.size()-1,OrderAl<BinnacleLine>::asc);
				setData(st);
				break;
			}
			default:
			{
				std::vector<BinnacleLine> st = OrderAl<BinnacleLine>::quickSort(data,0,data.size()-1,OrderAl<BinnacleLine>::asc);
				setData(st);
				break;
			}
			}
		}else{

			switch(al){
			case 1:{
				//MergeSort
				std::vector<BinnacleLine> st = OrderAl<BinnacleLine>::mergesort(data,0,data.size()-1,OrderAl<BinnacleLine>::desc);
				setData(st);

				break;
			}
			case 2:{
				std::vector<BinnacleLine> st = OrderAl<BinnacleLine>::bubble(data,OrderAl<BinnacleLine>::desc);
				setData(st);

				break;
			}
			case 3:{
				std::vector<BinnacleLine> st = OrderAl<BinnacleLine>::insersion(data,OrderAl<BinnacleLine>::desc);
				setData(st);
				break;
			}
			case 4:{
				std::vector<BinnacleLine> st = OrderAl<BinnacleLine>::selection(data,OrderAl<BinnacleLine>::desc);
				setData(st);
				break;
			}
			case 5:{
				std::vector<BinnacleLine> st = OrderAl<BinnacleLine>::quickSort(data,0,data.size()-1,OrderAl<BinnacleLine>::desc);
				setData(st);
				break;
			}
			default:{
				std::vector<BinnacleLine> st = OrderAl<BinnacleLine>::quickSort(data,0,data.size()-1,OrderAl<BinnacleLine>::desc);
				setData(st);
				break;
			}
			}
		}
	}
}




std::vector <int> Binnacle::getDestinyPorts(int threshold = 1000, bool compare(int, int) = OrderAl<int>::asc){
	// sort in ascending order by destination ports
	sortData('f',true,5);
	/*The idea is that the function returns a set of ports that satisfy the threshold
	 *I did not implemented a full Set data structure class because of lack of time. That would have been the ideal implementation.
	 */
	std::vector <int> set;
	int dPort;
	bool exist;
	for(std::vector<BinnacleLine>::iterator it = this->data.begin(); it != this->data.end(); it++){
		dPort = (*it).getDestinyPort();
		exist = Searcher<int>::elementExist(set,dPort);
		if ((compare(dPort,threshold)== true) && (exist == false)&& (dPort > 0)){
			set.push_back(dPort);
		}
		/*
		if(dPort > threshold){
			break;
		}
		*/
	}

	return set;
}


void Binnacle::printDestinyPorts(int threshold = 1000 ,bool compare(int,int) = OrderAl<int>::asc){
	std::vector<int> vec = getDestinyPorts(threshold,compare);
    std::copy(vec.begin(), vec.end(), std::ostream_iterator<int>(std::cout, " "));
    std::cout << std::endl;
}


std::vector<std::string> Binnacle::searchMailServicesByPorts(int p1, int p2){

	std::vector<std::string> set;
	bool exist;
	for(std::vector<BinnacleLine>::iterator it = this->data.begin(); it != this->data.end(); it++){

	}

	return set;
}

